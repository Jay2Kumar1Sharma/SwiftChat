version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: chat-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: chat-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: chat-api-gateway
    environment:
      - NODE_ENV=production
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
      - CHAT_SERVICE_PORT=${CHAT_SERVICE_PORT}
      - NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT}
      - FRONTEND_URL=${FRONTEND_URL}
    ports:
      - "${API_GATEWAY_PORT}:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # WebSocket Gateway
  websocket-gateway:
    build: ./websocket-gateway
    container_name: chat-websocket-gateway
    environment:
      - NODE_ENV=production
      - WEBSOCKET_GATEWAY_PORT=${WEBSOCKET_GATEWAY_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - FRONTEND_URL=${FRONTEND_URL}
    ports:
      - "${WEBSOCKET_GATEWAY_PORT}:4001"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Auth Service
  auth-service:
    build: ./auth-service
    container_name: chat-auth-service
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Chat Service
  chat-service:
    build: ./chat-service
    container_name: chat-chat-service
    environment:
      - NODE_ENV=production
      - CHAT_SERVICE_PORT=${CHAT_SERVICE_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: chat-notification-service
    environment:
      - NODE_ENV=production
      - NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: chat-frontend
    ports:
      - "80:80"
    depends_on:
      - api-gateway
      - websocket-gateway
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: chat-network
